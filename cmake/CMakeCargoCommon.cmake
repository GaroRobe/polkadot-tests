function(cargo_lib_file)
  if(WIN32)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
      set(LIB_TARGET "x86_64-pc-windows-msvc" PARENT_SCOPE)
    else()
      set(LIB_TARGET "i686-pc-windows-msvc" PARENT_SCOPE)
    endif()
	elseif(ANDROID)
    if(ANDROID_SYSROOT_ABI STREQUAL "x86")
      set(LIB_TARGET "i686-linux-android" PARENT_SCOPE)
    elseif(ANDROID_SYSROOT_ABI STREQUAL "x86_64")
      set(LIB_TARGET "x86_64-linux-android" PARENT_SCOPE)
    elseif(ANDROID_SYSROOT_ABI STREQUAL "arm")
      set(LIB_TARGET "arm-linux-androideabi" PARENT_SCOPE)
    elseif(ANDROID_SYSROOT_ABI STREQUAL "arm64")
      set(LIB_TARGET "aarch64-linux-android" PARENT_SCOPE)
    endif()
  elseif(IOS)
		set(LIB_TARGET "universal" PARENT_SCOPE)
  elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin)
    set(LIB_TARGET "x86_64-apple-darwin" PARENT_SCOPE)
	else()
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
      set(LIB_TARGET "x86_64-unknown-linux-gnu" PARENT_SCOPE)
    else()
      set(LIB_TARGET "i686-unknown-linux-gnu" PARENT_SCOPE)
    endif()
  endif()

  if(NOT CMAKE_BUILD_TYPE)
    set(LIB_BUILD_TYPE "debug" PARENT_SCOPE)
  elseif(${CMAKE_BUILD_TYPE} STREQUAL "Release")
    set(LIB_BUILD_TYPE "release" PARENT_SCOPE)
  else()
    set(LIB_BUILD_TYPE "debug" PARENT_SCOPE)
  endif()

  set(LIB_FILE "${CARGO_TARGET_DIR}/${LIB_TARGET}/${LIB_BUILD_TYPE}/${CMAKE_STATIC_LIBRARY_PREFIX}${LIB_NAME}${CMAKE_STATIC_LIBRARY_SUFFIX}" PARENT_SCOPE)
endfunction()
